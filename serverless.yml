service: demo-waiting-queue
app: demo-waiting-queue
provider:
  name: aws
  httpApi:
    cors: true
  runtime: nodejs14.x
  iam:
    role: DefaultRole
  region: us-east-1
  versionFunctions: false
  stackName: demo-waiting-queue
  timeout: 10
  environment:

    #대기열 Queue의 URL
    waiting_queue_url: 
      Ref: WaitingQueue
    #대기열 업데이트 알림을 위한 Queue의 URL
    event_queue_url: 
      Ref: EventQueue
    #유저 Counter의 DDB 이름   
    waiting_counter_ddb_name:
      Ref: CounterDDB
    #유저 목록 DDB 이름
    waiting_ddb_name:
      Ref: WaitingUserListTable
    #예약 등록 허용 시간
    user_view_time_in_mill: 15000
    #대기열 숫자 업데이트 간격(초)
    notification_interval: 5

    socket_api_gateway_id:
      Ref: WebsocketsApi
    #최대 몇명 까지 동시에 예약 가능 한지
    concurrent: 2
  deploymentBucket:
    name: ${aws:accountId}-${self:app}-deploys
    maxPreviousDeploymentArtifacts: 5
    blockPublicAccess: true
  deploymentPrefix: demo
resources:
  Resources:
    #대기열 Queue
    WaitingQueue:
      Type: AWS::SQS::Queue
      Properties:
        ContentBasedDeduplication: true
        FifoQueue: true
        QueueName: Waiting-Queue.fifo
        VisibilityTimeout: 900
    #대기시간 알림용 이벤트 Queue
    EventQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: Event-Queue
        VisibilityTimeout: 60

    #대기열 업데이트 이벤트를 위한 Cron Event Rule    
    CronOneLambdaPermissions:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Fn::GetAtt:
            - CronUnderscoreoneUnderscoregetLambdaFunction
            - Arn
        Principal: events.amazonaws.com
    CronOneJob:
      Type: AWS::Events::Rule
      Properties:
        ScheduleExpression: "rate(1 minute)"
        State: ENABLED
        Targets:
          - Arn:
              Fn::GetAtt:
                - CronUnderscoreoneUnderscoregetLambdaFunction
                - Arn
            Id:
              Ref: CronUnderscoreoneUnderscoregetLambdaFunction

    #모든 람다를 위한 Role
    DefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:app}-DefaultLambdaExcutionRole      
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                    - sqs:*
                    - logs:*
                    - execute-api:*
                  Resource: '*'
    #대기열 Queue의 처리를 위한 Role. SQS:DeleteMessage를 Deny
    HandlerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:app}-HandlerLambdaExcutionRole      
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                    - sqs:*
                    - logs:*
                    - states:*
                    - execute-api:*
                  Resource: '*'
                # - Effect: Deny
                #   Action:
                #     - sqs:DeleteMessage
                #   Resource: 
                #     Fn::GetAtt:
                #       - WaitingQueue
                #       - Arn
    #유저 Counter DDB
    CounterDDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: waiting-user-counter-table
        AttributeDefinitions:
          - AttributeName: counter_id 
            AttributeType: S
        KeySchema:
          - AttributeName: counter_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    #유저 목록 DDB
    WaitingUserListTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: waiting-user-list-table
        AttributeDefinitions:
          - AttributeName: connection_id 
            AttributeType: S
        KeySchema:
          - AttributeName: connection_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST



    #StepFunctions 
    StatesExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "Fn::Sub": "states.${AWS::Region}.amazonaws.com"

              Action: "sts:AssumeRole"
        Path: "/"
        Policies:
          - PolicyName: StatesExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:*"
                    - "sqs:*"
                  Resource: "*"
    WaitingQueueStateMachine:
      Type: "AWS::StepFunctions::StateMachine"
      Properties:
        StateMachineName: '${self:app}-WaitForProcess'
        RoleArn:
          "Fn::GetAtt": ["StatesExecutionRole", "Arn"]
        DefinitionString:
          "Fn::Sub":
            - |-
              {
                "Comment": "WaitingQueueStateMachine",
                "StartAt": "Wait",
                "States": {
                  "Wait": {
                    "Type": "Wait",
                    "SecondsPath": "$.view_time",
                    "Next": "Notify User"
                  },
                  "Notify User": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                      "Payload":{

                        "connection_id.$": "$.connection_id",
                        "waitQueueURL.$": "$.waitQueueURL",
                        "receiptHandle.$": "$.receiptHandle"
                      },
                      "FunctionName": "#{notifiy_end_function_name}:$LATEST"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException"
                        ],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 6,
                        "BackoffRate": 2
                      }
                    ],
                    "OutputPath": "$.Payload",
                    "Next": "DeleteMessage"
                  },
                  "DeleteMessage": {
                    "Type": "Task",
                    "End": true,
                    "Parameters": {
                      "QueueUrl.$": "$.waitQueueURL",
                      "ReceiptHandle.$": "$.receiptHandle"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:sqs:deleteMessage"
                  }
                }
              }
            - account_id: ${aws:accountId}
              notifiy_end_function_name:
                Fn::GetAtt:
                  - NotifyUnderscoreendLambdaFunction
                  - Arn
    



plugins:
  - serverless-deployment-bucket
  - serverless-cloudformation-sub-variables



#람다 함수들
functions:
  sqs_handle_event_message:
    name: ${self:app}-handle_event_message
    handler: src/lambda/sqs/event/handleMessage.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EventQueue
              - Arn
  sqs_handle_waiting_message:
    name: ${self:app}-handle_waiting_message
    handler: src/lambda/sqs/waiting/handleMessage.handler
    role: HandlerRole
    events:
      - sqs:
	
          batchSize: 1
          arn:
            Fn::GetAtt:
              - WaitingQueue
              - Arn
    environment:
      stepfunctions_arn:
        Ref: WaitingQueueStateMachine
    timeout: 900
  notify_end:
    name: ${self:app}-notify_end
    handler: src/lambda/user/notifyEnd.handler

  sqs_delete:
    name: ${self:app}-sqs_delete
    handler: src/lambda/sqs/delete.handler
    events:
      - httpApi:
          path: /${opt:stage, "dev"}/sqs
          method: delete
  cron_one_get:
    name: ${self:app}-cron_one_get
    handler: src/lambda/cron/one/get.handler

  onConnect:
    name: ${self:app}-onConnect
    handler: src/lambda/user/onConnect.handler
    events:
      - websocket:
          route: $connect

  onDisconnect:
    name: ${self:app}-onDisconnect
    handler: src/lambda/user/onDisconnect.handler
    events:
      - websocket:
          route: $disconnect
  default:
    name: ${self:app}-default
    handler: src/lambda/user/default.handler
    events:
      - websocket:
          route: $default
  